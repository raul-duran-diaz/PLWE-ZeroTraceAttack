{VERSION 6 0 "IBM INTEL NT" "6.0" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 0 1 255 0 0 1 0 1 0 0 
1 0 0 0 0 1 }{CSTYLE "2D Math" -1 2 "Times" 0 1 0 0 0 0 0 0 2 0 0 0 0 
0 0 1 }{CSTYLE "2D Comment" 2 18 "" 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 }
{PSTYLE "Normal" -1 0 1 {CSTYLE "" -1 -1 "Times" 1 12 0 0 0 1 2 2 2 2 
2 2 1 1 1 1 }1 1 0 0 0 0 1 0 1 0 2 2 0 1 }{PSTYLE "Author" -1 19 1 
{CSTYLE "" -1 -1 "Times" 1 12 0 0 0 1 2 2 2 2 2 2 1 1 1 1 }3 1 0 0 8 
8 1 0 1 0 2 2 0 1 }{PSTYLE "Heading 1" -1 256 1 {CSTYLE "" -1 -1 "Time
s" 1 18 0 0 0 1 2 1 2 2 2 2 1 1 1 1 }3 1 0 0 8 4 1 0 1 0 2 2 0 1 }}
{SECT 0 {EXCHG {PARA 0 "" 0 "" {TEXT -1 0 "" }}{PARA 256 "" 0 "" 
{TEXT -1 35 "Trace-Based Cryptoanalysis of  PLWE" }}{PARA 256 "" 0 "" 
{TEXT -1 18 "for the case when " }{XPPEDIT 18 0 "x^2+1;" "6#,&*$%\"xG
\"\"#\"\"\"F'F'" }{TEXT -1 9 " divides " }{XPPEDIT 18 0 "f(x);" "6#-%
\"fG6#%\"xG" }{TEXT -1 0 "" }}{PARA 19 "" 0 "" {TEXT -1 58 "I. Blanco \+
Chac\363n, B. Barbero Lucas, R. Dur\341n D\355az, R. Njah" }}{PARA 0 "
" 0 "" {TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 8 "resta
rt:" }}}{EXCHG {PARA 0 "" 0 "" {TEXT -1 0 "" }}{PARA 0 "" 0 "" {TEXT 
-1 59 "First, we have the definition of all the needed procedures:" }}
{PARA 0 "" 0 "" {TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 
0 68 "# ==============================================================
====" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 115 "MuestUniRq:=proc(n
,rollq)\nlocal s, i:\n\ns:=[]:\nfor i from 1 to n do\n s:=[op(s),rollq
()]:\nend do:\nreturn s:\nend proc:" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 68 "# ===================================================
===============" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 127 "MuestDi
scGaussRq:=proc(n,X)\nlocal s, v:\n\nv := Statistics[Sample](X,n):\ns \+
:= [seq(floor(v[i]+0.5),i=1..n)]:\n\nreturn s:\nend proc:" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 68 "# =================================
=================================" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 204 "MuestUniRq0:=proc(n,rollq,q)\nlocal s, i:\n\n while \+
true do\n s:=[]:\n for i from 1 to n do\n  s:=[op(s),rollq()]:\n end d
o:\n\n if coeff(EvalEnAlfa(s,n,q),alpha,1) = 0 then\n  return s:\n end
 if:\n\nend do:\nend proc:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 
68 "# ================================================================
==" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 166 "MuestUniRq0Rq:=proc(
n,q,rollq,M)\nlocal C, i:\n\n C:=[]:\n for i from 1 to M do\n  C:=[op(
C),[MuestUniRq0(n,rollq,q),MuestUniRq(n,rollq)]]:\n end do:\n\n return
 C:\n\nend proc:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 68 "# =====
=============================================================" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 144 "Suma:=proc(a,b,q)\n\nif nop
s(a) <> nops(b) then\n print(\"Error in sum\"):\n return a:\nend if:\n
\nreturn [seq(a[i]+b[i] mod q,i=1..nops(a))]:\n\nend proc:" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 68 "# =================================
=================================" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 214 "Multip:=proc(a,s,q,f,x)\nlocal p1, p2, pp, N:\n\nN:=
degree(f,x):\np1 := add(a[i]*x^(i-1),i=1..nops(a)):\np2 := add(s[i]*x^
(i-1),i=1..nops(s)):\npp := Rem(p1*p2,f,x) mod q:\nreturn [seq(coeff(p
p,x,i),i=0..N-1)]:\n\nend proc:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 
1 0 68 "# ============================================================
======" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 274 "MuestPLWERq0Rq:=
proc(n,q,f,x,X,rollq,M)\nlocal s, C, i, a, b, err:\n\ns := MuestUniRq(
n,rollq):\nC:=[]:\nfor i from 1 to M do\n a := MuestUniRq0(n,rollq,q):
\n b := Multip(a,s,q,f,x):\n err := MuestDiscGaussRq(n,X):\n b := Suma
(b,err,q):\n C:=[op(C),[a,b]]:\nend do:\nreturn C:\nend proc:" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 68 "# ==========================
========================================" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 137 "ComputeSigma:=proc(n,q,sig)\nlocal Sigma1:\n\n Sigma
1 := \{seq(i mod q,i=-2*isqrt(n/2)*sig..2*isqrt(n/2)*sig)\}:\n   \n re
turn Sigma1:\nend proc:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 68 "
# ==================================================================" 
}}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 109 "EvalEnAlfa:=proc(s,n,q)
\nlocal m:\n\n return Rem(add(s[i+1]*alpha^i,i=0..n-1),alpha^2+1,alpha
) mod q:\n\nend proc:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 68 "# \+
==================================================================" }}
}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 86 "TrazaEnAlfa:=proc(s,n,q)\n
\n return 2*coeff(EvalEnAlfa(s,n,q),alpha,0) mod q:\n\nend proc:" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 68 "# ==========================
========================================" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 317 "Algorithm2:=proc(mue,n,q,Sigma1)\nlocal G, f, g, fla
g:\nG:=\{\}:\nfor g from 0 to q-1 do\n flag:=1:\n for f in mue do\n  i
f \{(TrazaEnAlfa(f[2],n,q) - EvalEnAlfa(f[1],n,q)*g)/2 mod q\} interse
ct Sigma1 = \{\} then\n   flag:=0:\n   break:\n  end if:\n end do:\n i
f flag = 1 then\n  G := G union \{g\}:\n end if:\nend do:\nreturn G:\n
end proc:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 68 "# ============
======================================================" }}}{EXCHG 
{PARA 0 "" 0 "" {TEXT -1 0 "" }}{PARA 0 "" 0 "" {TEXT -1 63 "Here we g
o with the \"main\" part. First we set parameter values:" }}{PARA 0 "
" 0 "" {TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 26 "sig:=8: # Value for sigma." 
}}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "" 0 "
" {TEXT -1 0 "" }}{PARA 0 "" 0 "" {TEXT -1 25 "Computation of the prim
e " }{XPPEDIT 18 0 "q;" "6#%\"qG" }{TEXT -1 1 "." }}{PARA 0 "" 0 "" 
{TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "initprime:=
5000:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 91 "q:=nextprime(initp
rime):\nwhile numtheory[legendre](-1,q) <> -1 do\n q:=nextprime(q):\ne
nd do:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 47 "q; # Prime satisf
ying the necessary conditions:" }}}{EXCHG {PARA 0 "" 0 "" {TEXT -1 0 "
" }}{PARA 0 "" 0 "" {TEXT -1 91 "Random variables: \"rollq\" for the u
niform sampler; and X for the discrete Gaussian sampler." }}{PARA 0 "
" 0 "" {TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "roll
q := rand(0..q-1):" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 41 "M:=60: # degree for \"intern
al polynomial\"" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 170 "flag:=0
:\nwhile flag = 0 do\n g:=0:\n for i from 0 to M do\n  g:=g+x^(i)*roll
q():\n end do:\n f:=expand((x^2+1)*g) mod q:\n if irreduc(f) = true th
en\n  flag:=1:\n end if:\nend do:" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 13 "N:=degree(f);" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 
1 0 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 47 "X := Statistics[
RandomVariable](Normal(0,sig)):" }}}{EXCHG {PARA 0 "" 0 "" {TEXT -1 0 
"" }}{PARA 0 "" 0 "" {TEXT -1 15 "We compute the " }{XPPEDIT 18 0 "Sig
ma;" "6#%&SigmaG" }{TEXT -1 29 " for the selected parameters:" }}
{PARA 0 "" 0 "" {TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 
0 30 "Sigma1:=ComputeSigma(N,q,sig):" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "" 0 "" {TEXT -1 0 "" }}{PARA 0 "
" 0 "" {TEXT -1 61 "Selection of number of tests; and number of sample
s per test." }}{PARA 0 "" 0 "" {TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 
"" {MPLTEXT 1 0 17 "ntests:=20: M:=5:" }}}{EXCHG {PARA 0 "" 0 "" 
{TEXT -1 0 "" }}{PARA 0 "" 0 "" {TEXT -1 24 "In this loop, we repeat \+
" }{XPPEDIT 18 0 "ntests;" "6#%'ntestsG" }{TEXT -1 34 " times the gene
ration of a set of " }{XPPEDIT 18 0 "M;" "6#%\"MG" }{TEXT -1 30 " samp
les from the PLWE oracle." }}{PARA 0 "" 0 "" {TEXT -1 99 "We execute A
lgorithm2 over the set and check whether or not the Algorithm returns \+
the right answer." }}{PARA 0 "" 0 "" {TEXT -1 22 "In this case, the se
t " }{XPPEDIT 18 0 "G;" "6#%\"GG" }{TEXT -1 71 " must contain one and \+
only one element for the Algorithm to be correct." }}{PARA 0 "" 0 "" 
{TEXT -1 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 363 "ff:=0:\nst
t:=time():\nttM:=0:\nttA:=0:\nfor i from 1 to ntests do\n st:=time():
\n mue:=MuestPLWERq0Rq(N,q,f,x,X,rollq,M):\n st1:=time():\n G:=Algorit
hm2(mue,N,q,Sigma1):\n st2:=time():\n ttM:=ttM+st1-st:\n ttA:=ttA+st2-
st1:\n print(i,G,st1 - st,st2 - st1):\n if nops(G) <> 1 then\n  ff:=ff
+1:\n end if:\nend do:\nprint(\"Failures\", ff, ttM/ntests, ttA/ntests
, (time()-stt)/ntests):" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "
" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "" 
0 "" {TEXT -1 0 "" }}{PARA 0 "" 0 "" {TEXT -1 28 "In the next loop, we
 repeat " }{XPPEDIT 18 0 "ntests;" "6#%'ntestsG" }{TEXT -1 34 " times \+
the generation of a set of " }{XPPEDIT 18 0 "M;" "6#%\"MG" }{TEXT -1 
33 " samples from the uniform oracle." }}{PARA 0 "" 0 "" {TEXT -1 99 "
We execute Algorithm2 over the set and check whether or not the Algori
thm returns the right answer." }}{PARA 0 "" 0 "" {TEXT -1 22 "In this \+
case, the set " }{XPPEDIT 18 0 "G;" "6#%\"GG" }{TEXT -1 47 " must be e
mpty for the Algorithm to be correct." }}{PARA 0 "" 0 "" {TEXT -1 0 "
" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 364 "ff:=0:\nstt:=time():\n
ttM:=0:\nttA:=0:\nfor i from 1 to ntests do\n st:=time():\n mue2:=Mues
tUniRq0Rq(N,q,rollq,M):\n st1:=time():\n G:=Algorithm2(mue2,N,q,Sigma1
):\n st2:=time():\n ttM:=ttM+st1-st:\n ttA:=ttA+st2-st1:\n print(i,nop
s(G),st1 - st,st2 - st1):\n if nops(G) <> 0 then\n  ff:=ff+1:\n end if
:\nend do:\nprint(\"Failures\", ff, ttM/ntests, ttA/ntests, (time()-st
t)/ntests):" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}}{MARK "
0 0 0" 0 }{VIEWOPTS 1 1 0 1 1 1803 1 1 1 1 }{PAGENUMBERS 0 1 2 33 1 1 
}
